within UWBody.Forces;

model SpringDamperParallel "Linear spring and linear damper in parallel"
  import UWBody.Types;
  parameter Boolean animation = true "= true, if animation shall be enabled";
  parameter SI.TranslationalSpringConstant c(final min = 0) "Spring constant";
  parameter SI.Length s_unstretched = 0 "Unstretched spring length";
  parameter SI.TranslationalDampingConstant d(final min = 0) = 0 "Damping constant";
  input SI.Distance width = world.defaultForceWidth "Width of spring" annotation(Dialog(tab = "Animation", group = "if animation = true", enable = animation));
  input SI.Distance coilWidth = width / 10 "Width of spring coil" annotation(Dialog(tab = "Animation", group = "if animation = true", enable = animation));
  parameter Integer numberOfWindings = 5 "Number of spring windings" annotation(Dialog(tab = "Animation", group = "if animation = true", enable = animation));
  input Types.Color color = UWBody.Types.Defaults.SpringColor "Color of spring" annotation(Dialog(colorSelector = true, tab = "Animation", group = "if animation = true", enable = animation));
  input Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)" annotation(Dialog(tab = "Animation", group = "if animation = true", enable = animation));
  extends Interfaces.PartialLineForce;
  extends Modelica.Thermal.HeatTransfer.Interfaces.PartialElementaryConditionalHeatPort(final T = 293.15);
protected
  Modelica.SIunits.Force f_d "Damping force";
  Visualizers.Advanced.Shape shape(shapeType = "spring", color = color, length = s, width = width, height = coilWidth * 2, lengthDirection = e_a, widthDirection = {0, 1, 0}, extra = numberOfWindings, r = frame_a.r_0, R = frame_a.R) if world.enableAnimation and animation;
equation
  f_d = d * der(s);
  f = c * (s - s_unstretched) + f_d;
  lossPower = f_d * der(s);
  annotation(Documentation(info = "<html>
<p>
<b>Linear spring</b> and <b>linear damper</b>
in parallel acting as line force between frame_a and frame_b.
A <b>force f</b> is exerted on the origin of frame_b and with opposite sign
on the origin of frame_a along the line from the origin of frame_a to the origin
of frame_b according to the equation:
</p>
<pre>
   f = c*(s - s_unstretched) + d*<b>der</b>(s);
</pre>
<p>
where \"c\", \"s_unstretched\" and \"d\" are parameters, \"s\" is the
distance between the origin of frame_a and the origin of frame_b
and der(s) is the time derivative of s.
</p>
</html>"), Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, initialScale = 0.1, grid = {10, 10}), graphics = {Text(visible = true, textColor = {64, 64, 64}, extent = {{-150, -150}, {150, -110}}, textString = "%name"), Line(visible = true, points = {{-80, 40}, {-80, -70}}, color = {64, 64, 64}), Line(visible = true, points = {{-80, -70}, {-52, -70}}, color = {64, 64, 64}), Rectangle(visible = true, lineColor = {64, 64, 64}, fillColor = {192, 192, 192}, fillPattern = FillPattern.HorizontalCylinder, extent = {{-52, -100}, {38, -40}}), Line(visible = true, points = {{-52, -40}, {68, -40}}, color = {64, 64, 64}), Line(visible = true, points = {{-52, -100}, {68, -100}}, color = {64, 64, 64}), Line(visible = true, points = {{38, -70}, {80, -70}}, color = {64, 64, 64}), Line(visible = true, points = {{80, 40}, {80, -70}}, color = {64, 64, 64}), Line(visible = true, points = {{-100, 0}, {-80, 0}}, color = {64, 64, 64}), Line(visible = true, points = {{80, 0}, {100, 0}}, color = {64, 64, 64}), Text(visible = true, textColor = {64, 64, 64}, extent = {{-150, 80}, {150, 110}}, textString = "d=%d"), Line(visible = useHeatPort, points = {{-100, -101}, {-100, -80}, {-6, -80}}, color = {191, 0, 0}, pattern = LinePattern.Dot), Text(visible = true, textColor = {64, 64, 64}, extent = {{-150, 115}, {150, 145}}, textString = "c=%c"), Polygon(visible = true, origin = {6.698, 39.88}, lineColor = {64, 64, 64}, fillColor = {255, 255, 255}, fillPattern = FillPattern.HorizontalCylinder, points = {{-86.698, 4.12}, {-67.698, 4.12}, {-54.698, -23.88}, {-26.698, 34.12}, {-18.698, 34.12}, {9.302, -23.88}, {37.302, 34.12}, {45.302, 34.12}, {59.302, 4.12}, {73.302, 4.12}, {73.302, -3.88}, {54.302, -3.88}, {41.302, 24.12}, {13.302, -33.88}, {5.302, -33.88}, {-22.698, 24.12}, {-50.698, -33.88}, {-58.698, -33.88}, {-72.698, -3.88}, {-86.698, -3.88}}), Polygon(visible = true, origin = {-56.75, 25.5}, lineColor = {64, 64, 64}, fillColor = {64, 64, 64}, fillPattern = FillPattern.Solid, points = {{-4.25, 18.5}, {8.75, -9.5}, {4.75, -19.5}, {-9.25, 10.5}}), Polygon(visible = true, origin = {0, 40}, lineColor = {64, 64, 64}, fillColor = {64, 64, 64}, fillPattern = FillPattern.Solid, points = {{-16, 24}, {-12, 34}, {16, -24}, {12, -34}}), Polygon(visible = true, origin = {56.75, 54.5}, lineColor = {64, 64, 64}, fillColor = {64, 64, 64}, fillPattern = FillPattern.Solid, points = {{-8.75, 9.5}, {-4.75, 19.5}, {9.25, -10.5}, {4.25, -18.5}}), Polygon(visible = true, origin = {-71.75, 40}, lineColor = {64, 64, 64}, fillColor = {191, 191, 191}, fillPattern = FillPattern.Solid, points = {{-8.25, 4}, {10.75, 4}, {5.75, -4}, {-8.25, -4}}), Polygon(visible = true, origin = {71.75, 40}, lineColor = {64, 64, 64}, fillColor = {191, 191, 191}, fillPattern = FillPattern.Solid, points = {{-5.75, 4}, {8.25, 4}, {8.25, -4}, {-10.75, -4}})}), Diagram(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}, initialScale = 0.1, grid = {10, 10}), graphics = {Line(visible = true, points = {{-68, 50}, {-68, 97}}, color = {128, 128, 128}), Line(visible = true, points = {{72, 50}, {72, 97}}, color = {128, 128, 128}), Line(visible = true, points = {{-68, 92}, {72, 92}}, color = {128, 128, 128}, arrow = {Arrow.None, Arrow.Filled}, arrowSize = 15), Text(visible = true, textColor = {64, 64, 64}, extent = {{-20, 72}, {20, 97}}, textString = "s"), Rectangle(visible = true, lineColor = {64, 64, 64}, fillColor = {192, 192, 192}, fillPattern = FillPattern.HorizontalCylinder, extent = {{-52, -80}, {38, -20}}), Line(visible = true, points = {{-52, -80}, {68, -80}}, color = {64, 64, 64}), Line(visible = true, points = {{-52, -20}, {68, -20}}, color = {64, 64, 64}), Line(visible = true, points = {{38, -50}, {80, -50}}, color = {64, 64, 64}), Line(visible = true, points = {{-80, -50}, {-52, -50}}, color = {64, 64, 64}), Line(visible = true, points = {{-80, 40}, {-80, -50}}, color = {64, 64, 64}), Line(visible = true, points = {{80, 40}, {80, -50}}, color = {64, 64, 64}), Line(visible = true, points = {{-100, 0}, {-80, 0}}, color = {64, 64, 64}), Line(visible = true, points = {{100, 0}, {80, 0}}, color = {64, 64, 64}), Polygon(visible = true, origin = {6.698, 39.88}, lineColor = {64, 64, 64}, fillColor = {255, 255, 255}, fillPattern = FillPattern.HorizontalCylinder, points = {{-86.698, 4.12}, {-67.698, 4.12}, {-54.698, -23.88}, {-26.698, 34.12}, {-18.698, 34.12}, {9.302, -23.88}, {37.302, 34.12}, {45.302, 34.12}, {59.302, 4.12}, {73.302, 4.12}, {73.302, -3.88}, {54.302, -3.88}, {41.302, 24.12}, {13.302, -33.88}, {5.302, -33.88}, {-22.698, 24.12}, {-50.698, -33.88}, {-58.698, -33.88}, {-72.698, -3.88}, {-86.698, -3.88}}), Polygon(visible = true, origin = {-56.75, 25.5}, lineColor = {64, 64, 64}, fillColor = {64, 64, 64}, fillPattern = FillPattern.Solid, points = {{-4.25, 18.5}, {8.75, -9.5}, {4.75, -19.5}, {-9.25, 10.5}}), Polygon(visible = true, origin = {0, 40}, lineColor = {64, 64, 64}, fillColor = {64, 64, 64}, fillPattern = FillPattern.Solid, points = {{-16, 24}, {-12, 34}, {16, -24}, {12, -34}}), Polygon(visible = true, origin = {56.75, 54.5}, lineColor = {64, 64, 64}, fillColor = {64, 64, 64}, fillPattern = FillPattern.Solid, points = {{-8.75, 9.5}, {-4.75, 19.5}, {9.25, -10.5}, {4.25, -18.5}}), Polygon(visible = true, origin = {-71.75, 40}, lineColor = {64, 64, 64}, fillColor = {191, 191, 191}, fillPattern = FillPattern.Solid, points = {{-8.25, 4}, {10.75, 4}, {5.75, -4}, {-8.25, -4}}), Polygon(visible = true, origin = {71.75, 40}, lineColor = {64, 64, 64}, fillColor = {191, 191, 191}, fillPattern = FillPattern.Solid, points = {{-5.75, 4}, {8.25, 4}, {8.25, -4}, {-10.75, -4}})}));
end SpringDamperParallel;
